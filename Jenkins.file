pipeline {
    agent any
tools {
  maven 'maven-3'
  jdk 'java-17'
}
environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
    stage('Checkout From Git'){
            steps{
                git 'https://github.com/Praveeen1996/jpetstore-6.git'
            }
        }
    stage('mvn build'){
            steps{
                sh 'mvn clean package'
            }
        } 
    stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Petclinic \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=Petclinic '''
                }
            }
        }
     stage("quality gate"){
           steps {
                 script {
                     waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                    }
                } 
        }
        stage("OWASP Dependency Check"){
            steps{
                dependencyCheck additionalArguments: '--scan ./ --format HTML ', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.html'
            }
        }
      stage ('Build and push to docker hub'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker build -t petshop ."
                        sh "docker tag petshop praveenhema/petshop:latest"
                        sh "docker push praveenhema/petshop:latest"
                   }
                }
            }
        }
    stage("TRIVY"){
            steps{
                sh "trivy image praveenhema/petshop:latest > trivy.txt"
            }
        }
    }
}
